declare namespace _default {
    function getTimeInHighestRelevantUnit(val: any, unit: "days" | "hours" | "minutes" | "seconds" | "milliseconds" | "MILLISECOND" | "SECOND" | "MINUTE" | "HOUR" | "DAY"): {
        /**
         * the consolidated time
         */
        time: number;
        /**
         * the unit of the time
         */
        unit: "MILLISECOND" | "SECOND" | "MINUTE" | "HOUR" | "DAY";
    };
    function formatDateToDeviceAssuranceGracePeriodExpiryLocaleString(date: Date, languageCode: LanguageCode, roundDownToNearestHour?: boolean): string;
    /**
     * @method calculateDaysBetween
     * Calculate the number of days between two epoch milliseconds timestamps
     * rounded down to the nearest day
     *
     * @param {Integer} epoch1 epoch timestamp in milliseconds as an integer
     * @param {Integer} epoch2 epoch timestamp in milliseconds as an integer
     * @return {Integer} The number of days between the two epoch timestamps
     */
    function calculateDaysBetween(epoch1: Integer, epoch2: Integer): Integer;
    /**
     * @method calculateDaysBetween
     * Calculate the number of days between two epoch milliseconds timestamps
     * rounded down to the nearest day
     *
     * @param {Integer} epoch1 epoch timestamp in milliseconds as an integer
     * @param {Integer} epoch2 epoch timestamp in milliseconds as an integer
     * @return {Integer} The number of days between the two epoch timestamps
     */
    function calculateDaysBetween(epoch1: Integer, epoch2: Integer): Integer;
}
export default _default;
//# sourceMappingURL=TimeUtil.d.ts.map